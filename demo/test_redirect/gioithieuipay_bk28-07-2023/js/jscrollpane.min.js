/**
 * @fileoverview dragscroll - scroll area by dragging
 * @version 0.0.8
 * 
 * @license MIT, see http://github.com/asvd/dragscroll
 * @copyright 2015 asvd <heliosframework@gmail.com> 
 */


(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.dragscroll = {}));
    }
}(this, function(exports) {
    var _window = window;
    var _document = document;
    var mousemove = 'mousemove';
    var mouseup = 'mouseup';
    var mousedown = 'mousedown';
    var EventListener = 'EventListener';
    var addEventListener = 'add' + EventListener;
    var removeEventListener = 'remove' + EventListener;
    var newScrollX, newScrollY;

    var dragged = [];
    var reset = function(i, el) {
        for (i = 0; i < dragged.length;) {
            el = dragged[i++];
            el = el.container || el;
            el[removeEventListener](mousedown, el.md, 0);
            _window[removeEventListener](mouseup, el.mu, 0);
            _window[removeEventListener](mousemove, el.mm, 0);
        }

        // cloning into array since HTMLCollection is updated dynamically
        dragged = [].slice.call(_document.getElementsByClassName('dragscroll'));
        for (i = 0; i < dragged.length;) {
            (function(el, lastClientX, lastClientY, pushed, scroller, cont) {
                (cont = el.container || el)[addEventListener](
                    mousedown,
                    cont.md = function(e) {
                        if (!el.hasAttribute('nochilddrag') ||
                            _document.elementFromPoint(
                                e.pageX, e.pageY
                            ) == cont
                        ) {
                            pushed = 1;
                            lastClientX = e.clientX;
                            lastClientY = e.clientY;

                            e.preventDefault();
                        }
                    }, 0
                );

                _window[addEventListener](
                    mouseup, cont.mu = function() {
                        pushed = 0;
                        // HERE
                        setTimeout(function() { el.classList.remove("dragging"); }, 100);
                    }, 0
                );

                _window[addEventListener](
                    mousemove,
                    cont.mm = function(e) {
                        if (pushed) {
                            el.classList.add("dragging");
                            (scroller = el.scroller || el).scrollLeft -=
                                newScrollX = (-lastClientX + (lastClientX = e.clientX));
                            scroller.scrollTop -=
                                newScrollY = (-lastClientY + (lastClientY = e.clientY));
                            if (el == _document.body) {
                                (scroller = _document.documentElement).scrollLeft -= newScrollX;
                                scroller.scrollTop -= newScrollY;
                            }
                        }
                    }, 0
                );
            })(dragged[i++]);
        }
    }


    if (_document.readyState == 'complete') {
        reset();
    } else {
        _window[addEventListener]('load', reset, 0);
    }

    exports.reset = reset;
}));
jQuery(document).ready(function($) {

    var cols = {},

        messageIsOpen = false;

    cols.showOverlay = function() {
        $('body').addClass('show-main-overlay');
    };
    cols.hideOverlay = function() {
        $('body').removeClass('show-main-overlay');
    };


    cols.showMessage = function() {
        $('body').addClass('show-menu');
        messageIsOpen = true;
    };
    cols.hideMessage = function() {
        $('body').removeClass('show-menu');
        $('#main .fillter-tool li').removeClass('active');
        messageIsOpen = false;
    };


    cols.showSidebar = function() {
        $('body').addClass('show-sidebar');
    };
    cols.hideSidebar = function() {
        $('body').removeClass('show-sidebar');
    };


    // Show sidebar when trigger is clicked

    $('.trigger-toggle-sidebar').on('click', function() {
        cols.showSidebar();
        cols.showOverlay();
    });


    $('.trigger-message-close').on('click', function() {
        cols.hideMessage();
        cols.hideOverlay();
    });


    // When you click on a message, show it

    $('#main .fillter-tool li').on('click', function(e) {
        var item = $(this),
            target = $(e.target);

        if (target.is('label')) {
            item.toggleClass('selected');
        } else {
            if (messageIsOpen && item.is('.active')) {
                cols.hideMessage();
                cols.hideOverlay();
            } else {
                if (messageIsOpen) {
                    cols.hideMessage();
                    item.addClass('active');
                    setTimeout(function() {
                        cols.showMessage();
                    }, 300);
                } else {
                    item.addClass('active');
                    cols.showMessage();
                }
                cols.showOverlay();
            }
        }
    });


    // This will prevent click from triggering twice when clicking checkbox/label

    $('input[type=checkbox]').on('click', function(e) {
        e.stopImmediatePropagation();
    });



    // When you click the overlay, close everything

    $('#main > .overlay').on('click', function() {
        cols.hideOverlay();
        cols.hideMessage();
        cols.hideSidebar();
    });



    // Enable sexy scrollbars




    // Disable links



    // Search box responsive stuff

    $('.search-box input').on('focus', function() {
        if ($(window).width() <= 1360) {
            cols.hideMessage();
        }
    });

});